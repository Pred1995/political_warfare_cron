import { Inject, Injectable, OnModuleInit } from "@nestjs/common";
import { Telegraf } from "telegraf";
import { AuthService } from "../auth/auth.service";
import { PrismaService } from "../prisma/prisma.service";
import * as process from "process";
import { Server } from "socket.io";
import { MyWebSocketGateway } from "../websocket/websocket.gateway";

const YOUR_GROUP_CHAT_ID = process.env.YOUR_GROUP_CHAT_ID || -1002400947474;

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Telegraf;
  private server: Server;

  constructor(
    private readonly authService: AuthService,
    private readonly prisma: PrismaService,
    @Inject(MyWebSocketGateway) private websocketGateway: MyWebSocketGateway
  ) {
    this.bot = new Telegraf(process.env.BOT_TOKEN);
  }

  async onModuleInit() {
    this.server = this.websocketGateway.server;

    this.bot.telegram.setMyCommands([
      { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" }
    ]);

    this.bot.start(async (ctx) => {
      try {
        const { id, first_name, username, is_premium } = ctx.from;
        const args = ctx.message?.text?.split(" ");

        if (args && args.length > 1) {
          const inviterId = Number(args[1]);

          const inviterRow = await this.prisma.user.findFirst({
            where: { id: inviterId }
          });

          if (inviterId && inviterRow) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
            const existingUser = await this.prisma.user.findFirst({
              where: { telegram_id: BigInt(id) }
            });

            if (existingUser) {
              await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
              return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.authService.validateUser(BigInt(id), first_name, username);

            const alreadyInvited = await this.prisma.invite.findFirst({
              where: {
                inviterId: inviterRow.id,
                inviteeId: user.id
              }
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            if (!alreadyInvited) {
              // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
              await this.prisma.invite.create({
                data: {
                  inviterId: inviterRow.id,
                  bonus: is_premium ? 25000 : 5000,
                  inviteeId: user.id,
                  isPremium: is_premium || false
                }
              });

              const bonusCoins = is_premium ? 25000 : 5000;
              await this.prisma.user.update({
                where: { id: inviterRow.id },
                data: { coins: { increment: bonusCoins } }
              });

              await this.prisma.user.update({
                where: { id: user.id },
                data: { coins: { increment: bonusCoins } }
              });

              const inviteTask = await this.prisma.task.findFirst({
                where: {
                  type: "INVITE",
                  target: "3"
                }
              });

              if (inviteTask) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
                const existingUserTask = await this.prisma.userTask.findFirst({
                  where: {
                    userId: inviterRow.id,
                    taskId: inviteTask.id
                  }
                });

                if (!existingUserTask) { // –ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                  const inviteCount = await this.prisma.invite.count({
                    where: { inviterId: inviterRow.id }
                  });

                  if (inviteCount >= Number(inviteTask.target)) {
                    await this.prisma.user.update({
                      where: { id: inviterRow.id },
                      data: { coins: { increment: inviteTask.reward } }
                    });

                    await this.prisma.userTask.create({
                      data: {
                        userId: inviterRow.id,
                        taskId: inviteTask.id,
                        status: "completed"
                      }
                    });

                    await ctx.reply(`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${inviteTask.reward} –º–æ–Ω–µ—Ç.`);
                  }
                } else {
                  await ctx.reply("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.");
                }
              }
              await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID ${inviterId}.`);
              await ctx.reply(`Hey, ${username ?? first_name}! üëã

Welcome to Political Warfare!üèõ

You can decide who will be the next president of US! üá∫üá∏

Choose your candidate, earn money for the and invite friends to competeüöÄ!`, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üé≤ PLAY üé≤", web_app: { url: process.env.FRONT_URL } }],
                    [{ text: "üöÄ Subscribe to the channel üöÄ", url: 'https://t.me/politicalwarfare' }],
                  ]
                }
              });
            } else {
              await ctx.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
            }
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          await this.authService.validateUser(BigInt(id), first_name, username);
          await ctx.reply(`Hey, ${username ?? first_name}! üëã

Welcome to Political Warfare!üèõ

You can decide who will be the next president of US! üá∫üá∏

Choose your candidate, earn money for the and invite friends to competeüöÄ!`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üé≤ PLAY üé≤", web_app: { url: process.env.FRONT_URL } }],
                [{ text: "üöÄ Subscribe to the channel üöÄ", url: 'https://t.me/politicalwarfare' }],
              ]
            }
          });
        }
      } catch (e) {
        console.log('–æ—à–∏–±–∫–∞ –±–æ—Ç–∞', e)
      }
    });

    this.bot.launch();
  }

  async createGroupInviteLink(): Promise<any> {
    return await this.bot.telegram.createChatInviteLink(YOUR_GROUP_CHAT_ID);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  async checkUserInGroup(userId: number, chatId?: string): Promise<[string, boolean]> {
    const user = await this.prisma.user.findFirst({
      where: { id: Number(userId) }
    });

    if (!user) {
      return ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", false];
    }

    const isInGroup = await this.checkUserMembershipInGroup(user.telegram_id, chatId ?? YOUR_GROUP_CHAT_ID.toString());

    if (isInGroup) {
      return await this.handleJoinGroup(user.id, chatId);
    } else {
      return ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.", false];
    }
  }

  private async checkUserMembershipInGroup(telegramId: bigint, chatId: string): Promise<boolean> {
    const member = await this.bot.telegram.getChatMember(chatId, Number(telegramId.toString()));
    return member.status !== "left" && member.status !== "kicked";
  }

  private async handleJoinGroup(userId: number, groupId: string): Promise<[string, boolean]> {
    const joinGroupTask = await this.prisma.task.findFirst({
      where: {
        type: "JOIN_GROUP",
        target: groupId
      }
    });

    if (joinGroupTask) {
      const userTask = await this.prisma.userTask.findFirst({
        where: {
          userId: userId,
          taskId: joinGroupTask.id
        }
      });

      if (!userTask) {
        const updatedUser = await this.prisma.user.update({
          where: { id: userId },
          data: { coins: { increment: joinGroupTask.reward } }
        });

        this.server.to(userId.toString()).emit("coinUpdated", {
          userId: userId,
          coins: updatedUser.coins,
          coinsProfit: updatedUser.coinsProfit,
          energy: updatedUser.energy
        });

        await this.prisma.userTask.create({
          data: {
            userId: userId,
            taskId: joinGroupTask.id,
            status: "completed"
          }
        });

        return [`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${joinGroupTask.reward} –º–æ–Ω–µ—Ç.`, true];
      }
    }

    return ["–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.", false];
  }

  async checkUserInChat(userId: number, chatId: string): Promise<[string, boolean]> {
    const user = await this.prisma.user.findFirst({
      where: { id: Number(userId) }
    });

    if (!user) {
      return ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", false];
    }

    const isInChat = await this.checkUserMembershipInChat(user.telegram_id, chatId);

    if (isInChat) {
      return await this.handleJoinChat(user.id, chatId);
    } else {
      return ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ.", false];
    }
  }

  private async checkUserMembershipInChat(telegramId: bigint, chatId: string): Promise<boolean> {

    console.log(chatId);

    const member = await this.bot.telegram.getChatMember(chatId, Number(telegramId.toString()));
    return member.status !== "left" && member.status !== "kicked";
  }

  private async handleJoinChat(userId: number, chatId: string): Promise<[string, boolean]> {
    const joinChatTask = await this.prisma.task.findFirst({
      where: {
        type: "JOIN_CHAT",
        target: chatId
      }
    });

    if (joinChatTask) {
      const userTask = await this.prisma.userTask.findFirst({
        where: {
          userId: userId,
          taskId: joinChatTask.id
        }
      });

      if (!userTask) {
        const updatedUser = await this.prisma.user.update({
          where: { id: userId },
          data: { coins: { increment: joinChatTask.reward } }
        });

        this.server.to(userId.toString()).emit("coinUpdated", {
          userId: userId,
          coins: updatedUser.coins,
          coinsProfit: updatedUser.coinsProfit,
          energy: updatedUser.energy
        });

        await this.prisma.userTask.create({
          data: {
            userId: userId,
            taskId: joinChatTask.id,
            status: "completed"
          }
        });

        return [`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${joinChatTask.reward} –º–æ–Ω–µ—Ç.`, true];
      }
    }

    return ["–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.", false];
  }
}
